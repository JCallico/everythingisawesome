# Performance Monitoring Workflow
# This workflow monitors application performance and health

name: Performance - Monitor & Test

on:
  schedule:
    # Run every 4 hours
    - cron: '0 */4 * * *'
  workflow_dispatch:

permissions:
  contents: read
  issues: write

env:
  # Default app URL - can be overridden by setting APP_URL repository variable in GitHub
  DEFAULT_APP_URL: 'https://everythingisawesome.news'

jobs:
  # Job 1: Health Check
  health-check:
    name: Application Health Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Set application URL
        run: |
          # Set the app URL - this can be overridden by setting APP_URL repository variable
          echo "APP_URL=${{ vars.APP_URL || env.DEFAULT_APP_URL }}" >> $GITHUB_ENV
          echo "Using APP_URL: ${{ vars.APP_URL || env.DEFAULT_APP_URL }}"
          echo ""
          echo "üí° To use a custom URL, set the APP_URL repository variable in GitHub Settings > Secrets and variables > Actions > Variables"

      - name: Check application health
        run: |
          echo "üè• Checking application health..."
          
          # Check if the application is responding
          STATUS_CODE=$(curl -f -s -o /dev/null -w "%{http_code}" $APP_URL)
          if [ "$STATUS_CODE" = "200" ]; then
            echo "‚úÖ Application is responding (HTTP $STATUS_CODE)"
          else
            echo "‚ùå Application is not responding (HTTP $STATUS_CODE)"
            exit 1
          fi
          
          # Check health endpoint
          HEALTH_STATUS=$(curl -f -s -o /dev/null -w "%{http_code}" $APP_URL/health)
          if [ "$HEALTH_STATUS" = "200" ]; then
            echo "‚úÖ Health endpoint is responding (HTTP $HEALTH_STATUS)"
          else
            echo "‚ö†Ô∏è Health endpoint returned HTTP $HEALTH_STATUS"
          fi
          
          # Check API endpoints (use correct endpoint paths)
          API_LATEST_STATUS=$(curl -f -s -o /dev/null -w "%{http_code}" $APP_URL/api/news/latest)
          if [ "$API_LATEST_STATUS" = "200" ]; then
            echo "‚úÖ API endpoints are responding (HTTP $API_LATEST_STATUS)"
          else
            echo "‚ùå API endpoints are not responding (HTTP $API_LATEST_STATUS)"
            exit 1
          fi
          
          # Check additional API endpoints
          API_DATES_STATUS=$(curl -f -s -o /dev/null -w "%{http_code}" $APP_URL/api/news/dates)
          if [ "$API_DATES_STATUS" = "200" ]; then
            echo "‚úÖ News dates API is responding (HTTP $API_DATES_STATUS)"
          else
            echo "‚ö†Ô∏è News dates API returned HTTP $API_DATES_STATUS"
          fi
          
          # Check if React app is properly loaded
          REACT_CONTENT=$(curl -s $APP_URL | grep -i "Everything is Awesome" || echo "")
          if [ -n "$REACT_CONTENT" ]; then
            echo "‚úÖ React application is properly loaded"
          else
            echo "‚ö†Ô∏è React application may not be properly loaded"
          fi

      - name: Performance test
        run: |
          echo "‚ö° Running performance tests..."
          
          # Simple response time test
          RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" $APP_URL)
          echo "Response time: ${RESPONSE_TIME}s"
          
          # Check if response time is acceptable (under 3 seconds)
          if (( $(echo "$RESPONSE_TIME < 3.0" | bc -l) )); then
            echo "‚úÖ Response time is acceptable"
          else
            echo "‚ö†Ô∏è Response time is slow: ${RESPONSE_TIME}s"
          fi

      - name: Generate health report
        run: |
          echo "# üè• Health Check Report" >> $GITHUB_STEP_SUMMARY
          echo "Generated on: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Application status
          STATUS=$(curl -f -s -o /dev/null -w "%{http_code}" $APP_URL)
          HEALTH_STATUS=$(curl -f -s -o /dev/null -w "%{http_code}" $APP_URL/health)
          API_STATUS=$(curl -f -s -o /dev/null -w "%{http_code}" $APP_URL/api/news/latest)
          API_DATES_STATUS=$(curl -f -s -o /dev/null -w "%{http_code}" $APP_URL/api/news/dates)
          
          echo "| Component | Status | Response Code |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Web App | $([ "$STATUS" = "200" ] && echo "‚úÖ Healthy" || echo "‚ùå Unhealthy") | $STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| Health Endpoint | $([ "$HEALTH_STATUS" = "200" ] && echo "‚úÖ Healthy" || echo "‚ùå Unhealthy") | $HEALTH_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| News API (Latest) | $([ "$API_STATUS" = "200" ] && echo "‚úÖ Healthy" || echo "‚ùå Unhealthy") | $API_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| News API (Dates) | $([ "$API_DATES_STATUS" = "200" ] && echo "‚úÖ Healthy" || echo "‚ùå Unhealthy") | $API_DATES_STATUS |" >> $GITHUB_STEP_SUMMARY
          
          # Performance metrics
          RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" $APP_URL)
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ‚ö° Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Response Time**: ${RESPONSE_TIME}s" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: $([ $(echo "$RESPONSE_TIME < 3.0" | bc -l) ] && echo "‚úÖ Good" || echo "‚ö†Ô∏è Needs Attention")" >> $GITHUB_STEP_SUMMARY

      - name: Create alert if unhealthy
        if: failure()
        uses: actions/github-script@v7
        env:
          ALERT_APP_URL: ${{ vars.APP_URL || env.DEFAULT_APP_URL }}
        with:
          script: |
            const title = `üö® Application Health Alert - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            # üö® Application Health Alert
            
            The automated health check has detected an issue with the application.
            
            ## üîç Issue Details
            
            - **Time**: ${new Date().toISOString()}
            - **Status**: Health check failed
            - **URL**: ${process.env.ALERT_APP_URL}
            
            ## üõ†Ô∏è Recommended Actions
            
            1. Check application logs in Azure Portal
            2. Verify Azure Web App status
            3. Check for any recent deployments
            4. Review application performance metrics
            5. Restart the application if necessary
            
            ## üìä Monitoring
            
            You can monitor the application at:
            - Azure Portal: https://portal.azure.com
            - Application URL: ${process.env.ALERT_APP_URL}
            
            **Generated by**: GitHub Actions Performance Monitoring
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'monitoring', 'high-priority']
            });

  # Job 2: Lighthouse Performance Test
  lighthouse-test:
    name: Lighthouse Performance Test
    runs-on: ubuntu-latest
    needs: health-check
    
    steps:
      - name: Set application URL
        run: |
          # Set the app URL - this can be overridden by setting APP_URL repository variable
          echo "APP_URL=${{ vars.APP_URL || env.DEFAULT_APP_URL }}" >> $GITHUB_ENV
          echo "Using APP_URL: ${{ vars.APP_URL || env.DEFAULT_APP_URL }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install Lighthouse
        run: npm install -g lighthouse

      - name: Run Lighthouse test
        run: |
          echo "üîç Running Lighthouse performance test..."
          
          # Run Lighthouse audit
          lighthouse --output=json --output-path=lighthouse-results.json --chrome-flags="--headless" $APP_URL || true
          
          # Extract scores
          if [ -f lighthouse-results.json ]; then
            PERFORMANCE=$(cat lighthouse-results.json | jq -r '.categories.performance.score * 100')
            ACCESSIBILITY=$(cat lighthouse-results.json | jq -r '.categories.accessibility.score * 100')
            BEST_PRACTICES=$(cat lighthouse-results.json | jq -r '.categories["best-practices"].score * 100')
            SEO=$(cat lighthouse-results.json | jq -r '.categories.seo.score * 100')
            
            echo "Performance Score: $PERFORMANCE"
            echo "Accessibility Score: $ACCESSIBILITY"
            echo "Best Practices Score: $BEST_PRACTICES"
            echo "SEO Score: $SEO"
          else
            echo "Lighthouse results not found"
          fi

      - name: Generate Lighthouse report
        run: |
          if [ -f lighthouse-results.json ]; then
            echo "# üîç Lighthouse Performance Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            PERFORMANCE=$(cat lighthouse-results.json | jq -r '.categories.performance.score * 100')
            ACCESSIBILITY=$(cat lighthouse-results.json | jq -r '.categories.accessibility.score * 100')
            BEST_PRACTICES=$(cat lighthouse-results.json | jq -r '.categories["best-practices"].score * 100')
            SEO=$(cat lighthouse-results.json | jq -r '.categories.seo.score * 100')
            
            echo "| Category | Score | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| Performance | ${PERFORMANCE}% | $([ $(echo "$PERFORMANCE >= 90" | bc -l) ] && echo "‚úÖ Excellent" || [ $(echo "$PERFORMANCE >= 70" | bc -l) ] && echo "‚ö†Ô∏è Good" || echo "‚ùå Needs Improvement") |" >> $GITHUB_STEP_SUMMARY
            echo "| Accessibility | ${ACCESSIBILITY}% | $([ $(echo "$ACCESSIBILITY >= 90" | bc -l) ] && echo "‚úÖ Excellent" || [ $(echo "$ACCESSIBILITY >= 70" | bc -l) ] && echo "‚ö†Ô∏è Good" || echo "‚ùå Needs Improvement") |" >> $GITHUB_STEP_SUMMARY
            echo "| Best Practices | ${BEST_PRACTICES}% | $([ $(echo "$BEST_PRACTICES >= 90" | bc -l) ] && echo "‚úÖ Excellent" || [ $(echo "$BEST_PRACTICES >= 70" | bc -l) ] && echo "‚ö†Ô∏è Good" || echo "‚ùå Needs Improvement") |" >> $GITHUB_STEP_SUMMARY
            echo "| SEO | ${SEO}% | $([ $(echo "$SEO >= 90" | bc -l) ] && echo "‚úÖ Excellent" || [ $(echo "$SEO >= 70" | bc -l) ] && echo "‚ö†Ô∏è Good" || echo "‚ùå Needs Improvement") |" >> $GITHUB_STEP_SUMMARY
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## üìä Overall Assessment" >> $GITHUB_STEP_SUMMARY
            
            OVERALL=$(echo "($PERFORMANCE + $ACCESSIBILITY + $BEST_PRACTICES + $SEO) / 4" | bc -l)
            echo "- **Overall Score**: ${OVERALL}%" >> $GITHUB_STEP_SUMMARY
            
            if (( $(echo "$OVERALL >= 90" | bc -l) )); then
              echo "- **Status**: ‚úÖ Excellent - Application performing well" >> $GITHUB_STEP_SUMMARY
            elif (( $(echo "$OVERALL >= 70" | bc -l) )); then
              echo "- **Status**: ‚ö†Ô∏è Good - Minor optimizations recommended" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Status**: ‚ùå Needs Improvement - Performance optimization required" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: lighthouse-results.json
