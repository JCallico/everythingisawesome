name: Mobile Build Release

on:
  workflow_dispatch:
    inputs:
      build_target:
        description: 'Which platform(s) to build'
        required: true
        default: 'Both'
        type: choice
        options:
        - Android
        - iOS
        - Both

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: ${{ inputs.build_target == 'Android' || inputs.build_target == 'Both' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup Java JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install dependencies
        run: |
          npm install -g pnpm
          pnpm install --no-frozen-lockfile

      - name: Install mobile dependencies
        run: cd mobile && pnpm install --no-frozen-lockfile

      - name: Generate native Android project
        run: cd mobile && npx expo prebuild --clean --platform android

      - name: Build Android Release APK
        run: cd mobile && ./android/gradlew -p android assembleRelease

      - name: Upload Android APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: mobile/android/app/build/outputs/apk/release/app-release.apk

  build-ios:
    runs-on: macos-latest
    timeout-minutes: 45
    if: ${{ inputs.build_target == 'iOS' || inputs.build_target == 'Both' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        run: |
          npm install -g pnpm
          pnpm install --no-frozen-lockfile

      - name: Install mobile dependencies
        run: cd mobile && pnpm install --no-frozen-lockfile

      - name: Generate native iOS project
        run: cd mobile && npx expo prebuild --clean --platform ios
        
      - name: List available iOS simulators
        run: xcrun simctl list devices available
        
      - name: List available iOS schemes
        run: cd mobile && xcodebuild -workspace ios/EverythingIsAwesome.xcworkspace -list

      - name: Check iOS SDK versions and build for available SDK
        run: |
          echo "=== Available iOS Simulator SDKs ==="
          xcodebuild -showsdks | grep iphonesimulator
          
          echo "=== Available iOS Simulators with Runtime Info ==="
          xcrun simctl list devices available --json | jq -r '.devices | to_entries[] | select(.key | contains("iOS")) | "\(.key): \(.value | length) devices"'
          
          echo "=== Available iPhone Simulators ==="
          xcrun simctl list devices available | grep "iPhone" | head -10
          
          # Get the iOS Simulator SDK identifier and check for available runtimes
          LATEST_SIMULATOR_SDK=$(xcodebuild -showsdks | grep iphonesimulator | tail -1 | awk '{print $6}')
          echo "Latest iOS Simulator SDK: $LATEST_SIMULATOR_SDK"
          
          # Find an iPhone simulator that's actually available (try multiple versions)
          SIMULATOR_NAME=""
          for IPHONE in "iPhone 15 Pro" "iPhone 15" "iPhone 14 Pro" "iPhone 14" "iPhone 13 Pro" "iPhone 13"; do
            if xcrun simctl list devices available | grep -q "$IPHONE"; then
              SIMULATOR_NAME="$IPHONE"
              echo "Found available simulator: $SIMULATOR_NAME"
              break
            fi
          done
          
          if [ -z "$SIMULATOR_NAME" ]; then
            echo "No suitable iPhone simulator found, using first available iPhone"
            SIMULATOR_NAME=$(xcrun simctl list devices available | grep "iPhone" | head -1 | sed 's/^[[:space:]]*//' | cut -d'(' -f1 | xargs)
          fi
          
          echo "Using simulator: $SIMULATOR_NAME"
          
          # Build using available simulator and SDK
          cd mobile && xcodebuild -workspace ios/EverythingIsAwesome.xcworkspace 
            -scheme EverythingIsAwesome 
            -configuration Release 
            -sdk $LATEST_SIMULATOR_SDK 
            -destination "platform=iOS Simulator,name=$SIMULATOR_NAME" 
            -derivedDataPath ios/build 
            IPHONEOS_DEPLOYMENT_TARGET=15.1 
            clean build

      - name: Upload iOS App
        uses: actions/upload-artifact@v4
        with:
          name: ios-app
          path: mobile/ios/build/Build/Products/Release-iphonesimulator/EverythingIsAwesome.app