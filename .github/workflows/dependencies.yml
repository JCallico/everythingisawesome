# Dependency Update Workflow
# This workflow handles automated dependency updates and security patches

name: Dependencies - Update & Security

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  # Job 1: Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          echo "🔍 Running security audit..."
          npm audit --audit-level=high --json > audit-results.json || true
          
          # Check if there are any high/critical vulnerabilities
          VULNERABILITIES=$(cat audit-results.json | jq -r '.metadata.vulnerabilities | .high + .critical')
          
          echo "Found $VULNERABILITIES high/critical vulnerabilities"
          
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "⚠️ Security vulnerabilities found!"
            npm audit --audit-level=high
            echo "Please run 'npm audit fix' to resolve these issues"
          else
            echo "✅ No high/critical security vulnerabilities found"
          fi

      - name: Check client dependencies
        run: |
          cd client
          npm ci
          npm audit --audit-level=high || true

      - name: Check mobile dependencies
        run: |
          cd mobile
          npm ci
          npm audit --audit-level=high || true

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: audit-results.json

  # Job 2: Dependency Updates
  dependency-updates:
    name: Check for Updates
    runs-on: ubuntu-latest
    needs: security-audit
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for outdated packages
        run: |
          echo "📦 Checking for outdated packages..."
          
          echo "## Root dependencies" >> outdated-report.md
          npm outdated --json > root-outdated.json || true
          
          echo "## Client dependencies" >> outdated-report.md
          cd client
          npm outdated --json > ../client-outdated.json || true
          cd ..
          
          echo "## Mobile dependencies" >> outdated-report.md
          cd mobile
          npm outdated --json > ../mobile-outdated.json || true
          cd ..

      - name: Generate update report
        run: |
          echo "# 📦 Dependency Update Report" >> $GITHUB_STEP_SUMMARY
          echo "Generated on: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Process outdated packages
          if [ -s root-outdated.json ]; then
            echo "## Root Project Updates Available" >> $GITHUB_STEP_SUMMARY
            echo "| Package | Current | Wanted | Latest |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|---------|---------|---------|" >> $GITHUB_STEP_SUMMARY
            cat root-outdated.json | jq -r 'to_entries[] | "| \(.key) | \(.value.current) | \(.value.wanted) | \(.value.latest) |"' >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -s client-outdated.json ]; then
            echo "## Client Updates Available" >> $GITHUB_STEP_SUMMARY
            echo "| Package | Current | Wanted | Latest |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|---------|---------|---------|" >> $GITHUB_STEP_SUMMARY
            cat client-outdated.json | jq -r 'to_entries[] | "| \(.key) | \(.value.current) | \(.value.wanted) | \(.value.latest) |"' >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -s mobile-outdated.json ]; then
            echo "## Mobile Updates Available" >> $GITHUB_STEP_SUMMARY
            echo "| Package | Current | Wanted | Latest |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|---------|---------|---------|" >> $GITHUB_STEP_SUMMARY
            cat mobile-outdated.json | jq -r 'to_entries[] | "| \(.key) | \(.value.current) | \(.value.wanted) | \(.value.latest) |"' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Create issue if updates available
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Check if any outdated packages exist
            const rootOutdated = fs.existsSync('root-outdated.json') && fs.statSync('root-outdated.json').size > 0;
            const clientOutdated = fs.existsSync('client-outdated.json') && fs.statSync('client-outdated.json').size > 0;
            const mobileOutdated = fs.existsSync('mobile-outdated.json') && fs.statSync('mobile-outdated.json').size > 0;
            
            if (rootOutdated || clientOutdated || mobileOutdated) {
              const title = `🔄 Dependency Updates Available - ${new Date().toISOString().split('T')[0]}`;
              const body = `
              # 📦 Dependency Update Report
              
              Automated dependency scan found updates available for the following packages:
              
              ${rootOutdated ? '## Root Project\n```\nnpm outdated\n```\n' : ''}
              ${clientOutdated ? '## Client Application\n```\ncd client && npm outdated\n```\n' : ''}
              ${mobileOutdated ? '## Mobile Application\n```\ncd mobile && npm outdated\n```\n' : ''}
              
              ## 🔧 Recommended Actions
              
              1. Review the outdated packages
              2. Test updates in a development environment
              3. Update packages with: \`npm update\`
              4. Run tests to ensure compatibility
              5. Update package-lock.json files
              
              ## 🛡️ Security Notes
              
              - Prioritize security updates
              - Test thoroughly before merging
              - Consider major version updates carefully
              
              **Generated by**: GitHub Actions Dependency Update Workflow
              `;
              
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['dependencies', 'maintenance']
              });
            }
