# Mobile Release Workflow
# Builds mobile app artifacts for testing and app store submission

name: Mobile Release

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Mobile Platform'
        required: true
        default: 'android'
        type: choice
        options:
          - android
          - ios
          - both
      release_type:
        description: 'Release Type'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release
          - both
      upload_artifacts:
        description: 'Upload artifacts as GitHub release'
        required: true
        default: false
        type: boolean

jobs:
  android-build:
    name: Build Android Artifacts
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.platform == 'android' || github.event.inputs.platform == 'both' }}
    
    steps:
      - name: 📱 Checkout Repository
        uses: actions/checkout@v4
        
      - name: ☕ Setup Java JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          
      - name: ⚙️ Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.2
          run_install: false
          
      - name: 🔧 Install Dependencies
        run: |
          echo "📦 Installing root dependencies..."
          pnpm install --no-frozen-lockfile --reporter=append-only
          
          echo "📱 Installing mobile dependencies..."
          cd mobile
          npm install --legacy-peer-deps --no-audit --no-fund
          
      - name: 📋 Validate Mobile Environment  
        run: |
          echo "🔍 Validating build environment..."
          
          # Check Java
          java -version
          echo "✅ Java JDK is available"
          
          # Check Watchman (important for React Native builds)
          if command -v watchman &> /dev/null; then
            echo "📱 Checking Watchman status..."
            watchman version
            echo "✅ Watchman is available and working"
          else
            echo "⚠️ Watchman not found - installing..."
            # On Ubuntu, we can use apt or install from source if needed
            sudo apt-get update && sudo apt-get install -y watchman || echo "⚠️ Watchman install failed, builds may be slower"
          fi
          
          # Check React Native CLI
          if ! npm list -g @react-native-community/cli &> /dev/null; then
            echo "⚛️ Installing React Native CLI..."
            npm install -g @react-native-community/cli
          fi
          
          echo "✅ Mobile build environment validated"
          
      - name: 🔧 Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: 🏗️ Generate Android Project
        run: |
          cd mobile
          echo "📱 Generating native Android project..."
          npx expo prebuild --platform android --clean
          echo "✅ Android project generated successfully"
          
      - name: 🔐 Prepare Signing Configuration
        env:
          KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          cd mobile
          
          # Use secrets if available, otherwise use demo passwords
          STORE_PASS="${KEYSTORE_PASSWORD:-release123}"
          KEY_PASS="${KEY_PASSWORD:-release123}"
          
          # Create keystore.properties in the android directory
          echo "storePassword=$STORE_PASS" > android/keystore.properties
          echo "keyPassword=$KEY_PASS" >> android/keystore.properties
          echo "keyAlias=everything-is-awesome" >> android/keystore.properties
          echo "storeFile=everything-is-awesome-release-key.keystore" >> android/keystore.properties
          
          # Create keystore if it doesn't exist (for demo/testing)
          if [[ ! -f "android/app/everything-is-awesome-release-key.keystore" ]]; then
            echo "🔑 Creating demo keystore (replace with production keystore for real releases)..."
            cd android/app
            keytool -genkey -v -keystore everything-is-awesome-release-key.keystore \
              -alias everything-is-awesome -keyalg RSA -keysize 2048 -validity 10000 \
              -storepass "$STORE_PASS" -keypass "$KEY_PASS" \
              -dname "CN=Everything Is Awesome, OU=Development, O=Callicode Inc., L=Toronto, ST=Ontario, C=CA"
            echo "✅ Demo keystore created"
          else
            echo "✅ Using existing production keystore"
          fi
          
      - name: 🏗️ Build Debug APK
        if: ${{ github.event.inputs.release_type == 'debug' || github.event.inputs.release_type == 'both' }}
        run: |
          echo "🔨 Building debug APK..."
          cd mobile
          
          # Pre-build verification (matching README steps)
          echo "📋 Pre-build verification..."
          if command -v watchman &> /dev/null; then
            watchman version || echo "⚠️ Watchman check failed, continuing anyway"
          fi
          
          # Build debug APK using Gradle (CI-friendly approach)
          ./android/gradlew -p android assembleDebug
          
          # Verify build
          if [[ -f "android/app/build/outputs/apk/debug/app-debug.apk" ]]; then
            APK_SIZE=$(du -h android/app/build/outputs/apk/debug/app-debug.apk | cut -f1)
            echo "✅ Debug APK built successfully - Size: $APK_SIZE"
          else
            echo "❌ Debug APK build failed"
            exit 1
          fi
          
      - name: 🚀 Build Release APK  
        if: ${{ github.event.inputs.release_type == 'release' || github.event.inputs.release_type == 'both' }}
        run: |
          echo "🔨 Building release APK..."
          cd mobile
          
          # Pre-build verification (matching README steps)
          echo "📋 Pre-build verification..."
          if command -v watchman &> /dev/null; then
            watchman version || echo "⚠️ Watchman check failed, continuing anyway"
          fi
          
          # Build production APK with embedded bundle (matches README exactly)
          ./android/gradlew -p android assembleRelease
          
          # Verify build
          if [[ -f "android/app/build/outputs/apk/release/app-release.apk" ]]; then
            APK_SIZE=$(du -h android/app/build/outputs/apk/release/app-release.apk | cut -f1)
            echo "✅ Release APK built successfully - Size: $APK_SIZE"
          else
            echo "❌ Release APK build failed"
            exit 1
          fi
          
      - name: 📦 Build Release AAB (Play Store)
        if: ${{ github.event.inputs.release_type == 'release' || github.event.inputs.release_type == 'both' }}
        run: |
          echo "📦 Building Android App Bundle for Play Store..."
          cd mobile
          ./android/gradlew -p android bundleRelease
          
          # Verify build
          if [[ -f "android/app/build/outputs/bundle/release/app-release.aab" ]]; then
            AAB_SIZE=$(du -h android/app/build/outputs/bundle/release/app-release.aab | cut -f1)
            echo "✅ Release AAB built successfully - Size: $AAB_SIZE"
          else
            echo "❌ Release AAB build failed"  
            exit 1
          fi
          
      - name: 🔍 Generate Build Summary
        run: |
          echo "📱 MOBILE BUILD SUMMARY" >> $GITHUB_STEP_SUMMARY
          echo "======================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📋 Build Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: Android" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Type**: ${{ github.event.inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Store Builds**: Automatically included with Release builds" >> $GITHUB_STEP_SUMMARY
          echo "- **Upload Artifacts**: ${{ github.event.inputs.upload_artifacts }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📦 Generated Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "| Artifact | Size | Purpose | Location |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          
          # Check what was built
          cd mobile
          
          if [[ -f "android/app/build/outputs/apk/debug/app-debug.apk" ]]; then
            DEBUG_SIZE=$(du -h android/app/build/outputs/apk/debug/app-debug.apk | cut -f1)
            echo "| Debug APK | $DEBUG_SIZE | Development/Testing | \`android/app/build/outputs/apk/debug/\` |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -f "android/app/build/outputs/apk/release/app-release.apk" ]]; then
            RELEASE_SIZE=$(du -h android/app/build/outputs/apk/release/app-release.apk | cut -f1)  
            echo "| Release APK | $RELEASE_SIZE | Sideloading/Distribution | \`android/app/build/outputs/apk/release/\` |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -f "android/app/build/outputs/bundle/release/app-release.aab" ]]; then
            AAB_SIZE=$(du -h android/app/build/outputs/bundle/release/app-release.aab | cut -f1)
            echo "| Release AAB | $AAB_SIZE | Google Play Store | \`android/app/build/outputs/bundle/release/\` |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- **APK Testing**: Download APK artifacts to test on Android devices" >> $GITHUB_STEP_SUMMARY
          echo "- **Sideloading**: Use release APK for manual installation" >> $GITHUB_STEP_SUMMARY
          echo "- **Play Store**: Use AAB file for Google Play Console submission" >> $GITHUB_STEP_SUMMARY
          echo "- **Note**: AAB files are automatically built with Release builds" >> $GITHUB_STEP_SUMMARY
          
      - name: 📤 Upload Debug APK
        if: ${{ github.event.inputs.release_type == 'debug' || github.event.inputs.release_type == 'both' }}
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: mobile/android/app/build/outputs/apk/debug/app-debug.apk
          retention-days: 30
          
      - name: 📤 Upload Release APK
        if: ${{ github.event.inputs.release_type == 'release' || github.event.inputs.release_type == 'both' }}
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: mobile/android/app/build/outputs/apk/release/app-release.apk
          retention-days: 90
          
      - name: 📤 Upload Release AAB
        if: ${{ github.event.inputs.release_type == 'release' || github.event.inputs.release_type == 'both' }}
        uses: actions/upload-artifact@v4
        with:
          name: play-store-aab
          path: mobile/android/app/build/outputs/bundle/release/app-release.aab
          retention-days: 365
          
      - name: 🏷️ Create GitHub Release
        if: ${{ github.event.inputs.upload_artifacts == 'true' && (github.event.inputs.release_type == 'release' || github.event.inputs.release_type == 'both') }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: mobile-v1.0.${{ github.run_number }}
          name: Mobile Release v1.0.${{ github.run_number }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            mobile/android/app/build/outputs/apk/release/app-release.apk
            mobile/android/app/build/outputs/bundle/release/app-release.aab
            mobile/ios/build/ipa/*.ipa
          body: |
            ## 📱 Mobile Release v1.0.${{ github.run_number }}
            
            This release contains mobile app artifacts for the Everything Is Awesome application, ready for distribution through app stores and direct installation.
            
            ### 📦 Artifacts Included:
            
            **Android** (if built):
            - **app-release.apk** (~70MB) - For sideloading and manual installation  
            - **app-release.aab** (~46MB) - For Google Play Store submission
            
            **iOS** (if built):
            - **[AppName].ipa** (~43MB) - For TestFlight and App Store submission
            
            ### 🏪 Store-Ready Builds:
            
            When **Release** build type is selected, both platforms automatically generate store-ready artifacts:
            - **Android**: APK (sideloading) + AAB (Play Store)
            - **iOS**: IPA (TestFlight/App Store) + Archive (distribution)
            
            ### 🔐 Signing Information:
            
            **Android**:
            - **Certificate**: Production-signed with release keystore
            - **Package**: com.jcallico.everythingisawesome  
            
            **iOS**:
            - **Bundle ID**: com.mobile.everythingisawesome
            - **Certificate**: Development/Distribution certificate (depending on secrets configuration)
            
            ### 📋 Installation Instructions:
            
            **Android APK Sideloading:**
            1. Enable "Unknown Sources" in Android Settings
            2. Download `app-release.apk`
            3. Install using: `adb install -r app-release.apk`
            
            **Android Play Store Submission:**
            1. Download `app-release.aab`
            2. Upload to Google Play Console
            3. Complete store listing and submit for review
            
            **iOS TestFlight/App Store:**
            1. Download the `.ipa` file
            2. Upload to App Store Connect via Xcode or Transporter
            3. Submit for TestFlight beta or App Store review
            
            ### ⚡ Built With:
            - React Native with Expo
            - **Android**: API 35, Java JDK 17, Production keystore signing
            - **iOS**: Xcode latest, CocoaPods, Code signing certificates
            - Cross-platform shared codebase
            
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ios-build:
    name: Build iOS Artifacts
    runs-on: macos-latest
    if: ${{ github.event.inputs.platform == 'ios' || github.event.inputs.platform == 'both' }}
    
    steps:
      - name: 🍎 Checkout Repository
        uses: actions/checkout@v4
        
      - name: ⚙️ Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.2
          run_install: false
          
      - name: 🔧 Install Dependencies
        run: |
          echo "📦 Installing root dependencies..."
          pnpm install --no-frozen-lockfile --reporter=append-only
          
          echo "📱 Installing mobile dependencies..."
          cd mobile
          npm install --legacy-peer-deps --no-audit --no-fund
          
      - name: 🍎 Setup iOS Development Environment
        run: |
          echo "� Validating iOS build environment..."
          
          # Check Xcode version
          echo "⚙️ Xcode version:"
          xcodebuild -version
          
          # Check iOS Simulators
          echo "📱 Available iOS Simulators:"
          xcrun simctl list devices ios | grep -E "(iPhone|iPad)" | head -5
          
          # Check CocoaPods
          echo "📦 CocoaPods version:"
          pod --version
          
          # Install CocoaPods if not available
          if ! command -v pod &> /dev/null; then
            echo "📦 Installing CocoaPods..."
            sudo gem install cocoapods
          fi
          
          echo "✅ iOS development environment validated"
          
      - name: 🏗️ Generate iOS Project
        run: |
          cd mobile
          echo "🍎 Generating native iOS project..."
          npx expo prebuild --platform ios --clean
          
          # Verify iOS project structure
          echo "📋 Verifying iOS project structure..."
          if [[ -d "ios" ]]; then
            echo "✅ iOS directory created"
            ls -la ios/
          else
            echo "❌ iOS directory not found"
            exit 1
          fi
          
          # Check for workspace file
          if [[ -f "ios/EverythingIsAwesome.xcworkspace/contents.xcworkspacedata" ]]; then
            echo "✅ Xcode workspace found: EverythingIsAwesome.xcworkspace"
          elif [[ -f "ios/mobile.xcworkspace/contents.xcworkspacedata" ]]; then
            echo "✅ Xcode workspace found: mobile.xcworkspace"
            echo "WORKSPACE_NAME=mobile" >> $GITHUB_ENV
          else
            echo "🔍 Searching for any .xcworkspace files..."
            find ios/ -name "*.xcworkspace" -type d || echo "No workspace files found"
            echo "❌ No valid Xcode workspace found"
            exit 1
          fi
          
          # Set default workspace name if not already set
          if [[ -z "$WORKSPACE_NAME" ]]; then
            echo "WORKSPACE_NAME=EverythingIsAwesome" >> $GITHUB_ENV
          fi
          
          echo "✅ iOS project generated successfully"
          
      - name: 📦 Install iOS Dependencies
        run: |
          cd mobile/ios
          echo "📦 Installing iOS CocoaPods dependencies..."
          pod install --verbose
          echo "✅ iOS dependencies installed successfully"
          
      - name: � Setup iOS Code Signing (Development)
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        run: |
          cd mobile
          
          # Create temporary keychain for CI
          KEYCHAIN_PATH="$HOME/Library/Keychains/build.keychain"
          KEYCHAIN_PASSWORD="build123"
          
          # Create and configure keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security list-keychains -d user -s "$KEYCHAIN_PATH" $(security list-keychains -d user | sed s/\"//g)
          
          # Install certificate if provided
          if [[ -n "$IOS_CERTIFICATE_BASE64" ]]; then
            echo "🔐 Installing iOS development certificate..."
            echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
            security import certificate.p12 -k "$KEYCHAIN_PATH" -P "${IOS_CERTIFICATE_PASSWORD:-}" -T /usr/bin/codesign
            rm certificate.p12
            echo "✅ Development certificate installed"
          else
            echo "⚠️ No iOS certificate provided - builds will be unsigned (development only)"
          fi
          
          # Install provisioning profile if provided
          if [[ -n "$IOS_PROVISIONING_PROFILE_BASE64" ]]; then
            echo "🔐 Installing iOS provisioning profile..."
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            echo "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
            echo "✅ Provisioning profile installed"
          else
            echo "⚠️ No iOS provisioning profile provided - using automatic code signing"
          fi
          
      - name: 📋 Create Export Options Configuration
        run: |
          cd mobile
          
          # Create ExportOptions.plist for IPA export
          cat > ios/ExportOptions.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>development</string>
              <key>uploadBitcode</key>
              <false/>
              <key>compileBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>signingStyle</key>
              <string>automatic</string>
          </dict>
          </plist>
          EOF
          
          echo "✅ Export options configuration created"
          
      - name: 🔨 Build Debug Configuration
        if: ${{ github.event.inputs.release_type == 'debug' || github.event.inputs.release_type == 'both' }}
        run: |
          echo "🔨 Building iOS Debug configuration..."
          cd mobile
          
          # Verify workspace exists
          WORKSPACE_PATH="ios/${WORKSPACE_NAME}.xcworkspace"
          if [[ ! -d "$WORKSPACE_PATH" ]]; then
            echo "❌ Workspace not found at: $WORKSPACE_PATH"
            echo "🔍 Available files in ios/:"
            ls -la ios/
            exit 1
          fi
          
          # Build Debug for iOS Simulator (matches documentation)
          xcodebuild -workspace "$WORKSPACE_PATH" \
            -scheme "$WORKSPACE_NAME" \
            -configuration Debug \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro Max' \
            -derivedDataPath ios/build \
            clean build
            
          # Verify build
          if [[ -d "ios/build/Build/Products/Debug-iphonesimulator/${WORKSPACE_NAME}.app" ]]; then
            APP_SIZE=$(du -sh "ios/build/Build/Products/Debug-iphonesimulator/${WORKSPACE_NAME}.app" | cut -f1)
            echo "✅ Debug build completed successfully - Size: $APP_SIZE"
          else
            echo "❌ Debug build failed - checking build products..."
            ls -la ios/build/Build/Products/Debug-iphonesimulator/ || echo "Debug build directory not found"
            exit 1
          fi
          
      - name: 🚀 Build Release Configuration
        if: ${{ github.event.inputs.release_type == 'release' || github.event.inputs.release_type == 'both' }}
        run: |
          echo "🚀 Building iOS Release configuration..."
          cd mobile
          
          # Verify workspace exists
          WORKSPACE_PATH="ios/${WORKSPACE_NAME}.xcworkspace"
          if [[ ! -d "$WORKSPACE_PATH" ]]; then
            echo "❌ Workspace not found at: $WORKSPACE_PATH"
            echo "🔍 Available files in ios/:"
            ls -la ios/
            exit 1
          fi
          
          # Build Release for iOS Simulator (standalone app, no Metro required)
          xcodebuild -workspace "$WORKSPACE_PATH" \
            -scheme "$WORKSPACE_NAME" \
            -configuration Release \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro Max' \
            -derivedDataPath ios/build \
            clean build
            
          # Verify build
          if [[ -d "ios/build/Build/Products/Release-iphonesimulator/${WORKSPACE_NAME}.app" ]]; then
            APP_SIZE=$(du -sh "ios/build/Build/Products/Release-iphonesimulator/${WORKSPACE_NAME}.app" | cut -f1)
            echo "✅ Release build completed successfully - Size: $APP_SIZE"
          else
            echo "❌ Release build failed - checking build products..."
            ls -la ios/build/Build/Products/Release-iphonesimulator/ || echo "Release build directory not found"
            exit 1
          fi
          
      - name: 📦 Build Archive for Distribution
        if: ${{ github.event.inputs.release_type == 'release' || github.event.inputs.release_type == 'both' }}
        run: |
          echo "📦 Creating Xcode archive for distribution..."
          cd mobile
          
          # Verify workspace exists
          WORKSPACE_PATH="ios/${WORKSPACE_NAME}.xcworkspace"
          if [[ ! -d "$WORKSPACE_PATH" ]]; then
            echo "❌ Workspace not found at: $WORKSPACE_PATH"
            exit 1
          fi
          
          # Create archive for App Store distribution
          xcodebuild -workspace "$WORKSPACE_PATH" \
            -scheme "$WORKSPACE_NAME" \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath "ios/build/${WORKSPACE_NAME}.xcarchive" \
            archive
            
          # Verify archive
          if [[ -d "ios/build/${WORKSPACE_NAME}.xcarchive" ]]; then
            ARCHIVE_SIZE=$(du -sh "ios/build/${WORKSPACE_NAME}.xcarchive" | cut -f1)
            echo "✅ Archive created successfully - Size: $ARCHIVE_SIZE"
          else
            echo "❌ Archive creation failed - checking build directory..."
            ls -la ios/build/ || echo "Build directory not found"
            exit 1
          fi
          
      - name: 📲 Export IPA for Distribution
        if: ${{ github.event.inputs.release_type == 'release' || github.event.inputs.release_type == 'both' }}
        run: |
          echo "📲 Exporting IPA from archive..."
          cd mobile
          
          # Export IPA using archive
          xcodebuild -exportArchive \
            -archivePath "ios/build/${WORKSPACE_NAME}.xcarchive" \
            -exportOptionsPlist ios/ExportOptions.plist \
            -exportPath ios/build/ipa/
            
          # Verify IPA export
          if [[ -f "ios/build/ipa/${WORKSPACE_NAME}.ipa" ]]; then
            IPA_SIZE=$(du -sh "ios/build/ipa/${WORKSPACE_NAME}.ipa" | cut -f1)
            echo "✅ IPA exported successfully - Size: $IPA_SIZE"
          else
            echo "❌ IPA export failed - checking export directory..."
            ls -la ios/build/ipa/ || echo "IPA export directory not found"
            exit 1
          fi
          
      - name: 🔍 Generate iOS Build Summary
        run: |
          echo "🍎 iOS BUILD SUMMARY" >> $GITHUB_STEP_SUMMARY
          echo "===================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📋 Build Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: iOS" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Type**: ${{ github.event.inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **App Store Builds**: Automatically included with Release builds" >> $GITHUB_STEP_SUMMARY
          echo "- **Xcode Version**: $(xcodebuild -version | head -1)" >> $GITHUB_STEP_SUMMARY
          echo "- **Upload Artifacts**: ${{ github.event.inputs.upload_artifacts }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📦 Generated iOS Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "| Artifact | Size | Purpose | Location |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          
          # Check what was built
          cd mobile
          
          if [[ -d "ios/build/Build/Products/Debug-iphonesimulator/${WORKSPACE_NAME}.app" ]]; then
            DEBUG_SIZE=$(du -sh "ios/build/Build/Products/Debug-iphonesimulator/${WORKSPACE_NAME}.app" | cut -f1)
            echo "| Debug App | $DEBUG_SIZE | Development/Testing | \`ios/build/Build/Products/Debug-iphonesimulator/\` |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -d "ios/build/Build/Products/Release-iphonesimulator/${WORKSPACE_NAME}.app" ]]; then
            RELEASE_SIZE=$(du -sh "ios/build/Build/Products/Release-iphonesimulator/${WORKSPACE_NAME}.app" | cut -f1)  
            echo "| Release App | $RELEASE_SIZE | Standalone Distribution | \`ios/build/Build/Products/Release-iphonesimulator/\` |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -d "ios/build/${WORKSPACE_NAME}.xcarchive" ]]; then
            ARCHIVE_SIZE=$(du -sh "ios/build/${WORKSPACE_NAME}.xcarchive" | cut -f1)
            echo "| Xcode Archive | $ARCHIVE_SIZE | App Store Distribution | \`ios/build/${WORKSPACE_NAME}.xcarchive\` |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -f "ios/build/ipa/${WORKSPACE_NAME}.ipa" ]]; then
            IPA_SIZE=$(du -sh "ios/build/ipa/${WORKSPACE_NAME}.ipa" | cut -f1)
            echo "| IPA Package | $IPA_SIZE | TestFlight/App Store | \`ios/build/ipa/${WORKSPACE_NAME}.ipa\` |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- **Simulator Testing**: Use Debug/Release .app files with iOS Simulator" >> $GITHUB_STEP_SUMMARY
          echo "- **Device Testing**: Install IPA on physical devices via Xcode/iTunes" >> $GITHUB_STEP_SUMMARY
          echo "- **TestFlight**: Upload IPA to App Store Connect for beta testing" >> $GITHUB_STEP_SUMMARY
          echo "- **App Store**: Submit IPA through App Store Connect for review" >> $GITHUB_STEP_SUMMARY
          echo "- **Note**: IPA and Archive files are automatically built with Release builds" >> $GITHUB_STEP_SUMMARY
          
      - name: 📤 Upload Debug App
        if: ${{ github.event.inputs.release_type == 'debug' || github.event.inputs.release_type == 'both' }}
        uses: actions/upload-artifact@v4
        with:
          name: ios-debug-app
          path: mobile/ios/build/Build/Products/Debug-iphonesimulator/${{ env.WORKSPACE_NAME }}.app
          retention-days: 30
          
      - name: 📤 Upload Release App
        if: ${{ github.event.inputs.release_type == 'release' || github.event.inputs.release_type == 'both' }}
        uses: actions/upload-artifact@v4
        with:
          name: ios-release-app
          path: mobile/ios/build/Build/Products/Release-iphonesimulator/${{ env.WORKSPACE_NAME }}.app
          retention-days: 90
          
      - name: 📤 Upload Xcode Archive
        if: ${{ github.event.inputs.release_type == 'release' || github.event.inputs.release_type == 'both' }}
        uses: actions/upload-artifact@v4
        with:
          name: ios-archive
          path: mobile/ios/build/${{ env.WORKSPACE_NAME }}.xcarchive
          retention-days: 90
          
      - name: 📤 Upload IPA Package
        if: ${{ github.event.inputs.release_type == 'release' || github.event.inputs.release_type == 'both' }}
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: mobile/ios/build/ipa/${{ env.WORKSPACE_NAME }}.ipa
          retention-days: 365

  build-complete:
    name: Build Complete
    runs-on: ubuntu-latest
    needs: [android-build, ios-build]
    if: always()
    
    steps:
      - name: 🎉 Mobile Build Summary
        run: |
          ANDROID_RESULT="${{ needs.android-build.result }}"
          IOS_RESULT="${{ needs.ios-build.result }}"
          
          # Check if any builds ran and succeeded
          if [[ ("$ANDROID_RESULT" == "success" || "$ANDROID_RESULT" == "skipped") && ("$IOS_RESULT" == "success" || "$IOS_RESULT" == "skipped") ]]; then
            echo "## ✅ Mobile Build Completed Successfully!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎯 **Your mobile artifacts are ready for use!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show platform-specific results
            if [[ "$ANDROID_RESULT" == "success" ]]; then
              echo "### 🤖 Android Build: ✅ Success" >> $GITHUB_STEP_SUMMARY
              echo "- APK files ready for testing and sideloading" >> $GITHUB_STEP_SUMMARY
              echo "- AAB file ready for Google Play Store submission" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [[ "$IOS_RESULT" == "success" ]]; then
              echo "### 🍎 iOS Build: ✅ Success" >> $GITHUB_STEP_SUMMARY
              echo "- Debug/Release .app files ready for iOS Simulator testing" >> $GITHUB_STEP_SUMMARY
              echo "- Xcode archive ready for distribution" >> $GITHUB_STEP_SUMMARY
              echo "- IPA file ready for TestFlight and App Store submission" >> $GITHUB_STEP_SUMMARY
            elif [[ "$IOS_RESULT" == "skipped" && "${{ github.event.inputs.platform }}" == "ios" ]]; then
              echo "### 🍎 iOS Build: ⏹️ Skipped" >> $GITHUB_STEP_SUMMARY
              echo "- iOS build was not selected for this workflow run" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### � Download Artifacts" >> $GITHUB_STEP_SUMMARY
            echo "1. Go to the **Actions** tab" >> $GITHUB_STEP_SUMMARY
            echo "2. Click on this workflow run" >> $GITHUB_STEP_SUMMARY
            echo "3. Scroll down to **Artifacts** section" >> $GITHUB_STEP_SUMMARY
            echo "4. Download the artifacts you need" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Mobile Build Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The mobile build process encountered an error. Please check the logs above for details." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📊 Build Results:" >> $GITHUB_STEP_SUMMARY
            echo "- **Android**: $ANDROID_RESULT" >> $GITHUB_STEP_SUMMARY  
            echo "- **iOS**: $IOS_RESULT" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Common Issues:" >> $GITHUB_STEP_SUMMARY
            echo "**Android**:" >> $GITHUB_STEP_SUMMARY
            echo "- Android SDK configuration problems" >> $GITHUB_STEP_SUMMARY
            echo "- Java JDK version incompatibility" >> $GITHUB_STEP_SUMMARY
            echo "- Keystore signing issues" >> $GITHUB_STEP_SUMMARY
            echo "- Dependency resolution problems" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**iOS**:" >> $GITHUB_STEP_SUMMARY
            echo "- Xcode command line tools not installed" >> $GITHUB_STEP_SUMMARY
            echo "- CocoaPods dependency conflicts" >> $GITHUB_STEP_SUMMARY
            echo "- iOS code signing certificate issues" >> $GITHUB_STEP_SUMMARY
            echo "- Provisioning profile configuration problems" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please review the workflow logs and try building again." >> $GITHUB_STEP_SUMMARY
          fi
